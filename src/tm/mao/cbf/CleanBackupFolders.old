import java.io.*;
import jcifs.smb.*;
import java.util.*;

public class CleanBackupFolders {

        public static void main(String[] args) throws IOException {

		String smbShare, smbShareSubDir;
		Date currentDate = new Date();
		Long currentTime = currentDate.getTime();
		Long itemTime, diffTime;
		SmbFile smbFile;

		Integer depthKeep = 7; // in days
		diffTime = (long) depthKeep * 3600 * 24 * 1000;
		Settings iniFileObj = new Settings(); // settings from settings.conf
		smbShare = "smb://" + iniFileObj.smbServer + "/" + iniFileObj.smbShare + "/";
		smbShareSubDir = iniFileObj.smbShareSubDir + "/";
		CBFIni iniBckObj = new CBFIni(); // backup settings from backups.conf

		NtlmPasswordAuthentication auth = new NtlmPasswordAuthentication(iniFileObj.domain, iniFileObj.user, iniFileObj.pass);
//		SmbFile smbFile = new SmbFile(smbShare, smbShareSubDir, auth);

		for(String[] sectionFields: iniBckObj.sectionData) { //перебор списка с данными для бэкапов
			System.out.println(sectionFields[0]); // тестовый вывод данных из списка
	                smbShare = "smb://" + sectionFields[3] + "/" + sectionFieldshare + "/";
        	        smbShareSubDir = iniFileObj.smbShareSubDir + "/";

/*
* sectionField[0] Backup=HANA-EQA_FULL
*             [1] Description=Полные бэкапы системы качества
*             [2] Type=Folder
*             [3] Server=172.16.0.23/Backup_file
*             [4] Folder=DB/hana/hana-eqa/full
*             [5] Depth=7
*/

			SmbFile smbFile = new SmbFile(smbShare, smbShareSubDir, auth);

			for ( SmbFile f : smbFile.listFiles() ) {

				SmbFile smbFile = new SmbFile(smbShare, smbShareSubDir + f.getName(), auth);


			}


/*			for ( SmbFile f : smbFile.listFiles() ) {
				if(f.isDirectory()) {
					System.out.println((char)27 + "[4m" + f.getCanonicalPath() + (char)27 + "[0m");
					SmbFile smbSubFile = new SmbFile(smbShare, smbShareSubDir + f.getName(), auth);
					for ( SmbFile sf : smbSubFile.listFiles() ) {
						itemTime = sf.createTime();
						if (currentTime - itemTime > diffTime) {
							System.out.println((char)27 + "[37;41m" + sf.getName() + (char)27 + "[0m  <-- expired");
//							sf.delete(); // dangerous!
//							System.out.println((char)27 + "[37;41m" + sf.getName() + (char)27 + "[0m  <-- deleted");
						} else {
							System.out.println(sf.getName());
						}
					}
				} else {
					System.out.println((char)27 + "[37;41m" + f.getCanonicalPath() + (char)27 + "[0m  <-- is file");
				}
			}*/
		}
        }
}

